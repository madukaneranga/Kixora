-- Function to create order with automatic stock management
CREATE OR REPLACE FUNCTION create_order_with_stock_management(
  p_user_id uuid,
  p_total decimal,
  p_currency text,
  p_payment_method text,
  p_shipping_method text,
  p_shipping_cost decimal,
  p_shipping_address jsonb,
  p_billing_address jsonb,
  p_order_items jsonb[] -- Array of {variant_id, quantity, price, product_title}
)
RETURNS TABLE(order_id uuid, success boolean, error_message text)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_order_id uuid;
  v_item jsonb;
  v_variant_id uuid;
  v_quantity integer;
  v_current_stock integer;
  v_order_status text;
  v_payment_status text;
  v_order_number text;
BEGIN
  -- Determine order status and payment status based on payment method
  CASE p_payment_method
    WHEN 'payhere' THEN
      v_order_status := 'pending';
      v_payment_status := 'pending';
    WHEN 'bank' THEN
      v_order_status := 'pending';
      v_payment_status := 'pending';
    WHEN 'cod' THEN
      v_order_status := 'confirmed';
      v_payment_status := 'pending';
    ELSE
      v_order_status := 'pending';
      v_payment_status := 'pending';
  END CASE;

  -- Order number will be generated by trigger

  -- Start transaction
  BEGIN
    -- Validate stock for all items first
    FOREACH v_item IN ARRAY p_order_items
    LOOP
      v_variant_id := (v_item->>'variant_id')::uuid;
      v_quantity := (v_item->>'quantity')::integer;

      SELECT stock INTO v_current_stock
      FROM product_variants
      WHERE id = v_variant_id
      FOR UPDATE; -- Lock the row

      IF v_current_stock IS NULL THEN
        RETURN QUERY SELECT NULL::uuid, false, 'Product variant not found: ' || v_variant_id::text;
        RETURN;
      END IF;

      IF v_current_stock < v_quantity THEN
        RETURN QUERY SELECT NULL::uuid, false,
          'Insufficient stock for variant ' || v_variant_id::text ||
          '. Available: ' || v_current_stock || ', Requested: ' || v_quantity;
        RETURN;
      END IF;
    END LOOP;

    -- Create the order (order_number will be generated by trigger)
    INSERT INTO orders (
      user_id,
      total,
      currency,
      status,
      payment_status,
      payment_method,
      shipping_method,
      shipping_cost,
      shipping_address,
      billing_address
    )
    VALUES (
      p_user_id,
      p_total,
      p_currency,
      v_order_status,
      v_payment_status,
      p_payment_method,
      p_shipping_method,
      p_shipping_cost,
      p_shipping_address,
      p_billing_address
    )
    RETURNING id INTO v_order_id;

    -- Create order items and update stock
    FOREACH v_item IN ARRAY p_order_items
    LOOP
      v_variant_id := (v_item->>'variant_id')::uuid;
      v_quantity := (v_item->>'quantity')::integer;

      -- Insert order item
      INSERT INTO order_items (
        order_id,
        product_variant_id,
        product_title,
        variant_info,
        quantity,
        unit_price,
        total_price
      )
      VALUES (
        v_order_id,
        v_variant_id,
        v_item->>'product_title',
        jsonb_build_object(
          'size', v_item->>'size',
          'color', v_item->>'color',
          'sku', v_item->>'sku'
        ),
        v_quantity,
        (v_item->>'price')::decimal,
        (v_quantity * (v_item->>'price')::decimal)
      );

      -- Update stock based on payment method
      IF p_payment_method IN ('cod', 'bank') THEN
        -- Decrement stock immediately for COD and bank transfer
        UPDATE product_variants
        SET stock = stock - v_quantity,
            updated_at = now()
        WHERE id = v_variant_id;
      END IF;
      -- For PayHere, stock will be decremented in the webhook
    END LOOP;

    -- Return success
    RETURN QUERY SELECT v_order_id, true, 'Order created successfully'::text;

  EXCEPTION
    WHEN OTHERS THEN
      -- Rollback happens automatically
      RETURN QUERY SELECT NULL::uuid, false, 'Order creation failed: ' || SQLERRM;
  END;
END;
$$;

-- Grant permission to authenticated users
GRANT EXECUTE ON FUNCTION create_order_with_stock_management TO authenticated;

-- Function to restore stock (for cancelled orders)
CREATE OR REPLACE FUNCTION restore_order_stock(
  p_order_id uuid
)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_item record;
BEGIN
  -- Get all order items and restore their stock
  FOR v_item IN
    SELECT product_variant_id, quantity
    FROM order_items
    WHERE order_id = p_order_id
  LOOP
    UPDATE product_variants
    SET stock = stock + v_item.quantity,
        updated_at = now()
    WHERE id = v_item.product_variant_id;
  END LOOP;

  RETURN true;
EXCEPTION
  WHEN OTHERS THEN
    RETURN false;
END;
$$;

-- Grant permission
GRANT EXECUTE ON FUNCTION restore_order_stock TO authenticated;